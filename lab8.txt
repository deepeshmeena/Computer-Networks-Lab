Lab 08: TCP in ns3

Objectives:
Understanding TCP dynamics using ns3 

TCP behaviour under packet loss 

Performance comparison of TCP versions 

Understanding TCP fairness 

 General instructions:
This lab is to be done in groups of two students 

Download relevant files needed for this lab, available on BodhiTree 

Create a directory called <rollnumber1>_<rollnumber2>_tcpns3.  Also add to this directory the file report.txt as well as various graphs and the scripts+data to generate them. 

Upto Extra 30HP: You are CS engineers.  You must think in terms of automation/scripting to reduce manual labour and also reduce chances of errors.  You’ll get upto 30HP for automating this entire lab: to run the relevant simulations one after another, generate appropriate PDF graphs, save/copy/rename relevant trace files, etc.  Show the script to the instructor to claim your HP. 

Getting warmed up: TCP Tahoe in ns3 [1+1+2+2 = 6 marks]
You will be using ns3.23 for this lab.  Download and compile ns3.23 (you are given an almost ready tgz in BodhiTree).  Run “./waf –configure” from within the ns-3.23 directory.  From lab08.tgz, place the file tcp-variants-comparison.cc in ns-3.23/scratch.  Take a look at the various parameters and network topology configuration in the main() code. Then you can run:

./waf --run "tcp-variants-comparison --transport_prot=TcpTahoe"

There are various output files generated as you can see.

By looking at the code or at the “trace” output file, find out the network topology.  From the code, also find the bottleneck bandwidth in the topology. 

Answer Given:

 

there are only two nodes where one is a sender and the other one is a receiver.  

bottleneck bandwidth = 1 Mbps (found inside the code)

Graded By:

Marks Given:

Comments Given:

From the last “ACK” in the trace file, find the number of bytes transferred successfully to the receiver in the simulation duration.  Compute the average throughput and compare it to the bottleneck bandwidth of the topology. 

Answer Given:

total no of bytes =867961 bytes

time taken =10.0097 sec.

 

Throughput = 867961/10.0097 Bps = 86711.9894 Bps = 0.086 MBps  = 0.688 Mbps

Graded By:

Marks Given:

Comments Given:

An important part of understanding TCP dynamics is the plot of cwnd versus time.  Using the “cwnd-trace” file, plot a graph of the cwnd against time; submit this as a file named “cwnd-tahoe.pdf”.  You are given the pyplot file cwnd-plot.py to help you with this.  Explain the shape of the graph: identify slow-start, timeout, congestion-avoidance phases. 

Answer Given:

slow-start is 0 sec to  2.22159 sec.   and the maximum value of cwnd is 71640   

timeout phase 2.22159 sec

then again slow start from 2.22159 to  4.25211 sec and cwnd value at 4.25211 sec is 36000 \

then congestion control starts from 4.25211 sec to 10.0084 sec 

Graded By:

Marks Given:

Comments Given:

Another important plot in understanding TCP is the growth of the sequence number with time.  Plot a graph of the seqNum sent (NOT received) versus time, using the relevant fields from the “trace” file.  Submit this as file named “seqnum-tahoe.pdf”.  It will be best if you write a script (using python/bash/awk) to extract the relevant fields of the trace file, as you will need similar scripts for further exercises. 

Answer Given:

Graded By:

Marks Given:

Comments Given:

Comparing TCP variants [2+2 = 4 marks]
Run a simulation similar to the above for TcpReno and TcpNewReno.  Be sure to save the trace files in a relevant sub-directory, so that the simulator does not overwrite the relevant trace files.

Plot a single graph, with 3 plot lines, one each for Tahoe, Reno, NewReno.  The graph should compare the cwnd-vs-time for each of the three variants.  Comment on the shape of each line and also compare across the three.  Submit the graph as cwnd-comparison.pdf 

Answer Given:

Graded By:

Marks Given:

Comments Given:

Likewise, compare the seqnum sent vs time across the 3 variants.  Submit the graph as seqnum-comparison.pdf 

Answer Given:

Graded By:

Marks Given:

Comments Given:

TCPTahoe performance under packet loss [1+1+3=5 marks]
Aside from buffer overflow losses, some links, especially wireless links, can have channel error related losses.  Technologies such as WiFi have link layer retransmissions, but some losses can show at the TCP layer despite this.  TCPTahoe does not behave very well under such non-congestion losses, as you will discover now.

Run:
./waf --run "tcp-variants-comparison –transport_prot=TcpTahoe --error_p=0.01" 

This simulates a 1% loss on the bottleneck link.  Compute the average throughput achieved.  Compare this with the earlier throughput under no loss.  Is the throughput loss just 1% or much higher? 

Answer Given:

Graded By:

Marks Given:

Comments Given:

Now, it is never good to run a probabilistic simulation just once.  To run the simulator with a different random loss pattern (but still 1% average loss rate), use:
./waf --run "tcp-variants-comparison –transport_prot=TcpTahoe --error_p=0.01 --run=0"
./waf --run "tcp-variants-comparison –transport_prot=TcpTahoe --error_p=0.01 --run=1"
./waf --run "tcp-variants-comparison –transport_prot=TcpTahoe --error_p=0.01 --run=2"
Is the throughput achieved the same in the three cases?  Compute and report the average as well as the standard deviation of the throughput, across the 3 runs. 

Answer Given:

Graded By:

Marks Given:

Comments Given:

Now, run the simulator thrice each, for loss rates of 1%, 2%, 4%, 7%, 10% (total of 15 runs).  (Now you’ll realize the value of automation and scripting!)  Plot a graph of the average throughput (average across 3 runs in each case) against the loss rate on the x-axis.  Submit this as throughput-vs-loss-tahoe.pdf.  Submit also the relevant graph plotting script(s).  Explain the shape of the graph. 

Answer Given:

Graded By:

Marks Given:

Comments Given:

No marks, up to 5HP each: Do the same study for TCPReno and TCPNewReno and explain the shape of the graphs (this will be trivial additional work for you if you automated the whole process). 

Answer Given:

Graded By:

Marks Given:

Comments Given:

TCP fairness study [2+3 = 5 marks]
For this study, you will use an induced error rate of 1%.  TCP is supposed to give a fair share of the bottleneck bandwidth to the N flows sharing it.  Does it do a good job of this?  Lets find out.  So far you have simulated with num_flows=1 (the default in the code).  You can run:

./waf --run "tcp-variants-comparison –transport_prot=TcpTahoe --error_p=0.01 --run=0 --num_flows=2"

This will change the number of flows across the bottleneck link.

For num_flows=2, compute the throughput for each flow.  Are they sharing the bandwidth equally?  Compute the Jain fairness index and comment on its value.  (See wikipedia if you’ve forgotten what the Jain fairness index is). 

Answer Given:

Graded By:

Marks Given:

Comments Given:

Run the simulator for num_flows ranging from 2 to 10 in steps of 2.  In each case, compute the Jain fairness index.  Plot a graph of the fairness index on the y-axis against num_flows on the x-axis.  Comment on the shape of the graph.  Submit the graph as file fairness-vs-numflows.pdf 

Answer Given:

Graded By:

Marks Given:

Comments Given:

No marks, up to 5HP each: Repeat the above exercise for TCPReno and TCPNewReno.  Compare the fairness of each variant.  (Again, this will be trivial additional work if you had automated the entire process). 

Answer Given:

Graded By:

Marks Given:

Comments Given:
